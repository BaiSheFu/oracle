
1.RECORD类型 -- 让同类的元素保存在同一张记录表中
  
    --声明 
     DECLARE 
       TYPE test_type IS RECORD (
            test1 VARCHAR2
            test2 NUMBER
            ....
       )
       v_type test_type;
      BEGIN
       v_type.test1 := 'ttt'; --赋值
       v_type.test2 := 1;
      END;
      /
      
2.序列类型
  
  --声明
  DECLARE 
    TYPE test_index IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
    v_index test_index;
  BEGIN 
    v_index(0) := 'william';  --赋值 索引是不连续的
    v_index(10) := 'wwww';
    IF v_index EXISTS(0) THEN --判断索引是否存在
      (DO SOMETHING)
    END IF;
  END;
  /
  
  --索引表的循环输出
  DECLARE 
    TYPE test_index IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
    v_index test_index;
    v_foot NUMEBR;
  BEGIN 
    v_index(0) := 'william';  --赋值 索引是不连续的
    v_index(10) := 'wwww';
    v_foot := v_index.FIRST; --找到第一个索引值
    WHILE(v_index.EXISTS(v_foot)) LOOP
        DBMS_OUTPUT.put_line('v_index : ' || v_index(v_foot));
        v_foot := v_index.NEXT(v_foot);  --利用NEXT函数读取下一个索引值
    END LOOP;
  END;
  /
  
3.嵌套表

  --新建嵌套表
  
  CREATE OR REPLACE TYPE table_test AS TABLE OF VARCHAR2(50);
  /
  
  DROP TABLE department;  
  
  CREATE TABLE department (  --创建一张表 
    did NUMBER,
    deptName VARCHAR2(50),
    projects table_test
  )NESTED TABLE projects STORE AS project_nested_table; -- 定义嵌套表的存储名称

 
  INSERT INTO department(did,deptName,projects) VALUES (10,'william',table_test('1号','2号')); -- 插入一条数据
  
  SELECT * FROM TABLE (
    SELECT projects FROM department WHERE did = 10 
  ) ;  --嵌套表中的多个数据以数据表的形式返回
   
   UPDATE TABLE (SELECT projects FROM department WHERE did = 10 )pro SET VALUE(pro) = '30' WHERE COLUMN_VALUE = '2号'; --嵌套表的更新
   
   
4.可变数组

 --可变数组是一个固定了长度的嵌套表 存储的是对象

 --新建可变数组
 
 CREATE OR REPLACE TYPE project_array AS VARRAY(3) OF VARCHAR2(50);
 /
 
 --创建一个嵌套表
 
 CREATE OR REPLACE TYPE project_type AS OBJECT (
    projectid NUMBER,
    projectname VARCHAR2(50),
    projectfunds NUMBER,
    pubdate DATE
 )
 /
 
 CREATE OR REPLACE TYPE project_array AS VARRAY(3) OF project_type ;
 /
 
 CREATE TABLE department (
    did NUMBER,
    projects project_array
 );
 
5.集合运算符

  1.CARDINALITY -- 集合长度
  
  --DEMO
  
  DECLARE 
    TYPE list_nested IS TABLE OF VARCHAR2(50) NOT NULL;
    v_all list_nested := list_nested('Num 1','Num 2','Num 3','Num 4');
  BEGIN 
    DBMS_OUTPUT.put_line('集合长度: '|| CARDINALITY(v_all));  -- 输出4 
    DBMS_OUTPUT.put_line('集合长度: '|| CARDINALITY(SET(v_all))); --无重复数据的个数
  END;
  /
  
 2.IS EMPTY -- 判断集合是否为空
 3.A MEMBER OF B --判断集合B是否存在A
 4.A MULTISET EXCEPT B -- 生成一个 集合A除去集合B的新集合
 5.A MULTISET INTERSECT B -- 生成一个 集合A集合B交集的新集合
 6.A MULTISET UNION B -- 生成一个 集合A集合B并集的新集合
 7.IS SET -- 判断是否是一个集合
 8.A SUBMULTISET B --判断A是否是B的子集合
 
6.FORALL语句
 
 将所需要的操作一次性交给数据库
 
 --DEMO
 
 DECLARE 
    TYPE v_array IS VARRAY(8) OF department.did%TYPE;
    v_deptno v_array := v_array(1,2,3,4);
 BEGIN 
    FORALL x IN v_deptno.FIRST .. v_deptno.LAST
       UPDATE department SET loc = 'BEIJING' WHERE did = v_deptno(x); 
 END
 /
 
7.BULK COLLECT 
 
 批量接收数据
 
 --TYPE dept_nested IS TABLE OF department%ROWTYPE;
 
 --v_dept dept_nested;
 
 --SELECT * BULK COLLECT INTO v_dept;
 
 

